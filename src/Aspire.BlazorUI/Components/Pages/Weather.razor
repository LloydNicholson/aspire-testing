@page "/weather"
@using Aspire.Core
@using Aspire.BlazorUI.Services
@using global::Azure
@using global::Azure.Data.Tables
@using Microsoft.AspNetCore.OutputCaching
@attribute [StreamRendering]
@attribute [OutputCache(Duration = 5)]
@inject WeatherService WeatherService
@inject TableServiceClient TableServiceClient
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

<button @onclick="AddToTableStorage">Do it bro</button>

@code {
    private IList<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherService.GetWeatherForecasts();
    }

    private async Task AddToTableStorage()
    {
        const string tableName = "testtable";
        await TableServiceClient.CreateTableIfNotExistsAsync(tableName);
        var client = TableServiceClient.GetTableClient(tableName);
        await client.UpsertEntityAsync(
            new TestTable
            {
                PartitionKey = Guid.NewGuid().ToString(),
                RowKey = string.Empty,
                Message = "wow dude",
            });
    }

    private class TestTable : ITableEntity
    {
        public string PartitionKey { get; set; } = null!;

        public string RowKey { get; set; } = null!;

        public DateTimeOffset? Timestamp { get; set; }

        public ETag ETag { get; set; }

        public string Message { get; set; } = null!;
    }

}